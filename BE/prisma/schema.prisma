// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  email               String             @unique
  password            String
  fullname            String
  avatar              String?
  socket              String?
  checkout            Checkout[]
  car                 Car[]
  comment             Comment[]
  sender              Chat[]             @relation("sender")
  receiver            Chat[]             @relation("receiver")
}

model Car {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  description         String
  fuel                String
  interiorColor       String
  kilometers          String
  seats               String
  transmission        String
  price               Float
  address             String
  status              String             @default("available")
  avgStar             Float?
  imageUri            String[]
  ownerId             String             @db.ObjectId
  owner               User               @relation(fields: [ownerId],references: [id])
  checkout            Checkout[]
  comment             Comment[]
}

model Protection {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  price               Float
  description          String
  checkout            Checkout[]
}

model Service {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  price               Float
  description         String
  checkout            Checkout[]
}

model Discount {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  promoCode           String             @unique
  description         String
  discountRent        Float
  minimunRent         Float
  imageUri            String
  addressDiscount     String[]
  checkout            Checkout[]
}

model Checkout {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  status              String
  price               Float
  dateRent            DateTime
  createdAt           DateTime           @default(now())
  carId               String             @db.ObjectId
  car                 Car                @relation(fields: [carId], references: [id])
  renterId            String             @db.ObjectId
  renter              User               @relation(fields: [renterId], references: [id])
  protectionId        String?            @db.ObjectId
  protection          Protection?        @relation(fields: [protectionId], references: [id])
  serviceId           String?            @db.ObjectId
  service             Service?           @relation(fields: [serviceId], references: [id])
  discountId          String?            @db.ObjectId
  discount            Discount?          @relation(fields: [discountId], references: [id])         
}

model Comment {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  description         String
  star                Int  
  carId               String             @db.ObjectId
  car                 Car                @relation(fields: [carId], references: [id])
  userId              String             @db.ObjectId
  user                User               @relation(fields: [userId], references: [id])
  createdAt           DateTime           @default(now())
}

model Chat {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  message             String?
  imageUri            String?
  createdAt           DateTime           @default(now())
  roomId              String             @db.ObjectId
  room                Room               @relation(fields: [roomId], references: id)
  senderId            String             @db.ObjectId
  sender              User               @relation("sender",fields: [senderId], references: [id])
  receiverId          String             @db.ObjectId
  receiver            User               @relation("receiver",fields: [receiverId], references: [id])
}

model Room {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  Chat                Chat[]
}